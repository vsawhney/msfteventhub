#!/usr/bin/env python

# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

"""
Example to demonstrate utilizing AzureNamedKeyCredential to authenticate with Event Hubs.
"""
import uuid
import datetime
import random
import json
import os
import time
from azure.core.credentials import AzureNamedKeyCredential
from azure.eventhub import EventHubProducerClient, EventData

# Target namespace and hub must also be specified.
FULLY_QUALIFIED_NAMESPACE = input("Enter the name of your Event Hub Full Qualified Namespace: ")
print (FULLY_QUALIFIED_NAMESPACE)
EVENTHUB_NAME = input("Enter the name of your Event Hub Name: ")
print(EVENTHUB_NAME)
EVENTHUB_POLICY_NAM = input("Enter the name of your Event Hub Policy Name: ")
print(EVENTHUB_POLICY_NAM)
EVENTHUB_KEY = input("Enter the name of your Event Hub Key: ") 
print(EVENTHUB_KEY)
to_send_message_cnt = int(input("Enter the number of events to generate:"))
print (to_send_message_cnt )



credential = AzureNamedKeyCredential(EVENTHUB_POLICY_NAME, EVENTHUB_KEY)

producer_client = EventHubProducerClient(
    fully_qualified_namespace=FULLY_QUALIFIED_NAMESPACE,
    eventhub_name=EVENTHUB_NAME,
    credential=credential,
    logging_enable=True
)
bytes_per_message = 256

start_time = time.time()

with producer_client:
    event_data_batch = producer_client.create_batch()
    for i in range(to_send_message_cnt):
        event_data = EventData('D' * bytes_per_message)
        try:
            event_data_batch.add(event_data)
        except ValueError:
            producer_client.send_batch(event_data_batch)
            event_data_batch = producer_client.create_batch()
            event_data_batch.add(event_data)
    if len(event_data_batch) > 0:
        producer_client.send_batch(event_data_batch)

print("Send messages in {} seconds.".format(time.time() - start_time))
